# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ndvI5s_p04efo3MOZ9md-Qe00JMXVIR3
"""

import gradio as gr
import nltk
import joblib
import pandas as pd
from sklearn.model_selection import train_test_split,GridSearchCV # type: ignore
from sklearn.feature_extraction.text import CountVectorizer # type: ignore
from sklearn.feature_extraction.text import TfidfVectorizer # type: ignore
from sklearn.linear_model import LogisticRegression # type: ignore
from sklearn.preprocessing import LabelEncoder # type: ignore
from sklearn.metrics import accuracy_score # type: ignore
import re
nltk.download('words')
# Load the data
file_path = 'Icthub_data_cleaned.xlsx'
df = pd.read_excel('/content/Icthub_data.xlsx')
df['User inputs'] = df['User inputs'].fillna('')  # Ensure no missing email texts
X = df['User inputs']
y = df['Chatbot Response']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)
count_vectorizer=TfidfVectorizer()
X_train=count_vectorizer.fit_transform(X_train)
X_test=count_vectorizer.transform(X_test)
label_encoder=LabelEncoder()
y_train=label_encoder.fit_transform(y_train)
y_test=label_encoder.transform(y_test)
param_grid = {
    'C': [0.1, 1, 10,100],
    'solver': ['lbfgs', 'liblinear']
}

grid_search = GridSearchCV(LogisticRegression(), param_grid, cv=5)

# Train the grid search model
grid_search.fit(X_train, y_train)

best_model = grid_search.best_estimator_
# Train the model
model = LogisticRegression(max_iter=1000)
assert isinstance(y_train, object)
model.fit(X_train, y_train)

# Evaluate the model
y_pred=best_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(f'Accuracy: {accuracy * 100:.2f}%')


best_model = joblib.load('best_model.joblib')
count_vectorizer = joblib.load('count_vectorizer.joblib')
label_encoder = joblib.load('label_encoder.joblib')

def predict_user_input(user_input):
    user_input = count_vectorizer.transform([user_input])
    predicted_class = best_model.predict(user_input)[0]
    predicted_value = label_encoder.inverse_transform([predicted_class])[0]
    return predicted_value.strip()

def is_meaningful_word(user_input):
    words_set = set(nltk_words.words())
    custom_words = {'icthub'}
    combined_words = words_set.union(custom_words)

    cleaned_input = re.sub(r'\W+', " ", user_input)
    input_words = cleaned_input.lower().split()

    for word in input_words:
        if word not in combined_words:
            input_words.remove(word)
    return len(input_words) > 0

def chatbot_response(user_input):
    if not is_meaningful_word(user_input):
        return "Please enter a meaningful word."
    return predict_user_input(user_input)

css = """
body {
  font-family: 'Arial', sans-serif;
}
#logo{
  height: 100px;
}

"""
conversion=[]

def respond(user_input):
  global conversion
  farewell_messages = ['bye', 'goodbye', 'exit', 'quit', 'farewell', 'see you', 'later']
  if user_input.lower() in farewell_messages:
    conversion.append(("You",user_input))
    conversion.append(("Chatbot", "Goodbye! the conversion has endes , please click 'Start New Chat' "))
    return conversion,gr.update(value="",interactive=False)

  response=chatbot_response(user_input)
  conversion.append(("You",user_input))
  conversion.append(("Chatbot",response))
  return conversion,gr.update(value="")


def start_new_chat():
  global conversion
  conversion=[]
  return conversion,gr.update(value="",interactive=True)


with gr.Blocks(css=css) as iface:
  logo = gr.Image("/content/ICTHUB_LOGO.png",elem_id="logo")
  chatbot=gr.Chatbot(conversion)
  with gr.Row():
    with gr.Column(scale=9):
      user_input=gr.Textbox(label="You",placeholder="Type a message ...",lines=2)
    with gr.Column(scale=1):
        with gr.Row():
          send_button=gr.Button("Send")
        with gr.Row():
          new_chat_button=gr.Button("Start new chat")

  send_button.click(fn=respond,inputs=user_input,outputs=[chatbot,user_input])
  user_input.submit(fn=respond,inputs=user_input,outputs=[chatbot,user_input])

  new_chat_button.click(fn=start_new_chat,outputs=[chatbot,user_input])

iface.launch(share=True)

"""# New section"""